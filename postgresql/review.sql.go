// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: review.sql

package db

import (
	"context"
	"database/sql"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
  user_id,
  title,
  content,
  classification,
  amount,
  insurance,
  place_id,
  place_rate,
  doctor_id,
  doctor_rate,
  midwife_id,
  midwife_rate,
  doula_id,
  doula_rate,
  team, 
  team_rate,
  image
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17
)
RETURNING id, user_id, title, content, date, classification, amount, overall_rate, insurance, place_id, place_rate, doctor_id, doctor_rate, midwife_id, midwife_rate, doula_id, doula_rate, team, team_rate, created_at, updated_at, image
`

type CreateReviewParams struct {
	UserID         sql.NullInt32  `json:"user_id"`
	Title          string         `json:"title"`
	Content        string         `json:"content"`
	Classification string         `json:"classification"`
	Amount         sql.NullString `json:"amount"`
	Insurance      sql.NullString `json:"insurance"`
	PlaceID        int32          `json:"place_id"`
	PlaceRate      int32          `json:"place_rate"`
	DoctorID       int32          `json:"doctor_id"`
	DoctorRate     int32          `json:"doctor_rate"`
	MidwifeID      sql.NullInt32  `json:"midwife_id"`
	MidwifeRate    sql.NullInt32  `json:"midwife_rate"`
	DoulaID        sql.NullInt32  `json:"doula_id"`
	DoulaRate      sql.NullInt32  `json:"doula_rate"`
	Team           sql.NullString `json:"team"`
	TeamRate       sql.NullInt32  `json:"team_rate"`
	Image          sql.NullString `json:"image"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Classification,
		arg.Amount,
		arg.Insurance,
		arg.PlaceID,
		arg.PlaceRate,
		arg.DoctorID,
		arg.DoctorRate,
		arg.MidwifeID,
		arg.MidwifeRate,
		arg.DoulaID,
		arg.DoulaRate,
		arg.Team,
		arg.TeamRate,
		arg.Image,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Date,
		&i.Classification,
		&i.Amount,
		&i.OverallRate,
		&i.Insurance,
		&i.PlaceID,
		&i.PlaceRate,
		&i.DoctorID,
		&i.DoctorRate,
		&i.MidwifeID,
		&i.MidwifeRate,
		&i.DoulaID,
		&i.DoulaRate,
		&i.Team,
		&i.TeamRate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Image,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :one
SELECT id, user_id, title, content, date, classification, amount, overall_rate, insurance, place_id, place_rate, doctor_id, doctor_rate, midwife_id, midwife_rate, doula_id, doula_rate, team, team_rate, created_at, updated_at, image FROM reviews
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, id int64) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Date,
		&i.Classification,
		&i.Amount,
		&i.OverallRate,
		&i.Insurance,
		&i.PlaceID,
		&i.PlaceRate,
		&i.DoctorID,
		&i.DoctorRate,
		&i.MidwifeID,
		&i.MidwifeRate,
		&i.DoulaID,
		&i.DoulaRate,
		&i.Team,
		&i.TeamRate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Image,
	)
	return i, err
}

const listReviews = `-- name: ListReviews :many
SELECT id, user_id, title, content, date, classification, amount, overall_rate, insurance, place_id, place_rate, doctor_id, doctor_rate, midwife_id, midwife_rate, doula_id, doula_rate, team, team_rate, created_at, updated_at, image FROM reviews
ORDER BY id
`

func (q *Queries) ListReviews(ctx context.Context) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Date,
			&i.Classification,
			&i.Amount,
			&i.OverallRate,
			&i.Insurance,
			&i.PlaceID,
			&i.PlaceRate,
			&i.DoctorID,
			&i.DoctorRate,
			&i.MidwifeID,
			&i.MidwifeRate,
			&i.DoulaID,
			&i.DoulaRate,
			&i.Team,
			&i.TeamRate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
