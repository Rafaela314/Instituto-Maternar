// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: doctor.sql

package db

import (
	"context"
)

const createDoctor = `-- name: CreateDoctor :one
INSERT INTO doctors (
  name,
  crm
) VALUES (
  $1, $2
)
RETURNING id, name, crm, average_rate, created_at
`

type CreateDoctorParams struct {
	Name string
	Crm  string
}

func (q *Queries) CreateDoctor(ctx context.Context, arg CreateDoctorParams) (Doctor, error) {
	row := q.db.QueryRowContext(ctx, createDoctor, arg.Name, arg.Crm)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Crm,
		&i.AverageRate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDoctor = `-- name: DeleteDoctor :exec
DELETE FROM doctors
WHERE id = $1
`

func (q *Queries) DeleteDoctor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDoctor, id)
	return err
}

const getDoctor = `-- name: GetDoctor :one
SELECT id, name, crm, average_rate, created_at FROM doctors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDoctor(ctx context.Context, id int64) (Doctor, error) {
	row := q.db.QueryRowContext(ctx, getDoctor, id)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Crm,
		&i.AverageRate,
		&i.CreatedAt,
	)
	return i, err
}

const listDoctors = `-- name: ListDoctors :many
SELECT id, name, crm, average_rate, created_at FROM doctors
ORDER BY id
`

func (q *Queries) ListDoctors(ctx context.Context) ([]Doctor, error) {
	rows, err := q.db.QueryContext(ctx, listDoctors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Doctor
	for rows.Next() {
		var i Doctor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Crm,
			&i.AverageRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
